<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"  xmlns:webfeeds="http://webfeeds.org/rss/1.0">
<channel>
  <title>Mike Carter</title>
  <link>https://mcarter.me</link>
  <description>I care deeply about building high quality web applications using simple scaleable code and proven open technologies.</description>
  <image>
    <url>https://mcarter.me/assets/images/me.jpg</url>
    <title>Mike Carter</title>
    <link>https://mcarter.me</link>
  </image>
  <atom:link href="https://mcarter.me/rss.xml" rel="self" type="application/rss+xml" />
  <webfeeds:icon>https://mcarter.me/assets/images/me.jpg</webfeeds:icon>
  <item>
    <title>The economics of JavaScript web apps</title>
    <pubDate>Sun, 23 Feb 2020 13:00:00 GMT</pubDate>
    <link>https://mcarter.me/posts/the-economics-of-javascript</link>
    <guid>https://mcarter.me/posts/the-economics-of-javascript</guid>
    <description>Your single page JavaScript web app probably doesn't make you as much money as its old-school alternative. Sorry.</description>
    <content:encoded><![CDATA[
      <p>A good portion of my career has been spent building single page JavaScript web applications, or otherwise using JavaScript to build for the web. I was playing with Digg's API back when Web 2.0 was a thing, picked up jQuery when that got big, did my CoffeeScript phase (<span class='emoji' role='img' aria-label='Heart'>&#x1F496;</span>), spent a few years with Backbone, and now 6 years using React.</p><p>In all this time, I've learned that while incredibly powerful, <strong>doing JavaScript properly on the front end can be very expensive.</strong></p><h2>Diminishing gains</h2><p>With web applications, value gained vs. money spent isn't exponential, or even linear - the gains are often diminishing. Getting from 80% valuable to 100% valuable doesn't require an extra 20% of development spend, it often requires an extra 100% or more.</p><p>Our industry is lead by hyper-profitable tech giants, for whom spending this additional money makes sense. A good example is Facebook, where React is used to build advanced front-ends, delivering maximum revenue for the company.</p><p>For Facebook, maximising revenue might mean hundreds of millions of additional dollars on their bottom line. The sheer scale of their operation means it's a no-brainer to spend the money required to go full JavaScript, handling all of the following pitfalls:</p><ul><li>What if the JavaScript is slow to arrive?</li><li>What if the JavaScript doesn't load at all?</li><li>What if the JavaScript isn't interpreted as intended by my browser?</li><li>What if a cached version of the JavaScript is loaded that isn't compatible with a new API?</li><li>What if the user has JavaScript disabled?</li><li>What if the user's connection is really slow, and data requests initiated by the JavaScript fail to respond?</li><li>What if the user is using a very underpowered device that can't handle the JavaScript?</li><li>What if the user has a browser extension installed that interferes with the JavaScript?</li></ul><p>A lot of us aren't like Facebook though. We work with much smaller businesses where the cost of handling JavaScript's pitfalls is proportionally much higher. The economics don't work the same way, and a JavaScript web application is comparitively expensive to implement properly. So expensive, in fact, that instead of handling the pitfalls, we often just accept that some customers will be unable to use our app.</p><h2>Round trips and progressive enhancement</h2><p>Most small and medium sized organisations are better off building with <strong>plain old HTML and CSS</strong>, using <strong>round trips to the server</strong>, and a <em>sprinkling</em> of JavaScript that <strong><a href="https://www.smashingmagazine.com/2009/04/progressive-enhancement-what-it-is-and-how-to-use-it/" rel="noopener" target="_blank">progressively enhances</a></strong> a solid, economical foundation.</p><p>This old-school approach yields a nice binary page load; either the HTML loads and can be interacted with, or it doesn't and can't. Rather than having to negotiate JavaScript's pitfalls, this approach makes it cheap to build a working web application for all of your users - users who you can bet will have lower-powered devices, on slower connections, running older software than your development team.</p><p>In the vast majority of cases the quality of the web application doesn't suffer from this approach, it gets better instead. Pages still load quickly, elements are still styled nicely, and JavaScript is still there doing its thing. The only difference is you're building from stable foundations by default, and putting in the extra time to progressively enhance where it makes sense.</p><h2>Keeping JavaScript in its place</h2><p>This isn't to say single page JavaScript web applications never make sense, because they sometimes do. It's just that most web applications being built today are simply user interfaces that store and retrieve information from a database. They're not putting a dent in the universe, but they do need to deliver value in organisations where a developer's salary is a pretty significant source of cost.</p><p>We developers need to be more cognizant of the economics of our work, and build our apps accordingly. Most development teams starting JavaScript web applications today won't consider the pitfalls listed above <strong>at all</strong>. They'll just start building, and assume their experience is everyone else's experience too. As a result, some of their customers won't get to use their application, and their business misses out. I am definitely guilty of making this mistake.</p><p>So, next time you're building a new web application, consider the economics of your approach and then proceed accordingly. More often than not, you'll find you can create a high quality production-ready product using just HTML &amp; CSS. From there you can progressively enhance with something like React where there's clear value in doing so, safe in the knowledge you're not going to be turning customers away, or spending more of your company's money than necessary to deliver a great product.</p>
    ]]></content:encoded>
  </item>
  <item>
    <title>Fix the right problems in your code</title>
    <pubDate>Sun, 02 Feb 2020 13:00:00 GMT</pubDate>
    <description>We spend too much time making vanity improvements to our code, while failing to make refactors that affect the long-term quality of our software. We need to do better.</description>
    <link>https://mcarter.me/posts/fix-the-right-problems</link>
    <guid>https://mcarter.me/posts/fix-the-right-problems</guid>
    <content:encoded><![CDATA[
      <p>When we save for the future, we tend to start by cutting out small and unnecessary expenses. Not buying $5 lattes, avoiding branded items at the supermarket, or getting in a couple of drinks at home before going out. These all seem like sensible ways to claw back a bit of cash at the end of each month.</p><p>However, most of us fail to take action on longer term opportunities for wealth creation. We pay compounding interest on bad debt, our savings get eroded by inflation, and we purchase liabilities rather than assets.</p><p>We mean well, but we struggle to save $100 per month while missing opportunities that could grow to $1,000,000 over a lifetime. We fix the wrong problems.</p><h2>The wrong problems in code</h2><p>As developers, we tend to fix the wrong problems in our code too. Take the following basic example:</p><img class="code-sample" src="/assets/images/posts/fix-the-right-problems/badcode.png" alt="getsBigger - a slightly verbose, slightly hard to read function"><p>This function returns <span class="code">true</span> if each number in a given array increments by one from the number that preceeded it (e.g. 1, 2, 3), and <span class="code">false</span> if not (e.g. 1, 3, 2). It's a little verbose, but with 15 minutes of refactoring we could transform it into something more clear and concise.</p><p>If we did refactor for clarity and brevity, it'd be tempting to think we'd spent our time well. However, taking into account the wider context of a whole codebase, we'd see the biggest issue isn't how the function is written, it's actually the function name. <span class="code">getsBigger</span> is both misleading and ambiguous.</p><p>Any developer seeing <span class="code">getsBigger</span> in use is likely to mininterpret its operation from its name alone. This wastes time, reduces the readability of the codebase, and increases the likelihood of accidental bugs through misuse. By contrast, the code within <span class="code">getsBigger</span> is actually a non-issue. It works, it's reasonably efficient, and it's unlikely to need to change.</p><p>Most developers will opt to rewrite the function, but the best value improvement we could make to <span class="code">getsBigger</span> would probably be to rename it to clearly convey its purpose. Something as quick as a find and replace across the codebase would mean every future developer could confidently use the function without needing to see how it's implemented. We'd be making a small change that pays off big over the long term, and we'd be fixing the right problem.</p><p><strong>This is not laziness!</strong> Refactoring <i>without</i> considering value is the lazy way to go. Taking time to think about improvements that deliver long term compounding benefits takes effort, and the right refactor to make isn't always the obvious or large one.</p><p>Software development is very expensive. As an industry, we need to be better at recognising this, and making pragmatic tradeoffs between time invested, and value delivered. We need to resist the vanity improvements, and look at the larger context to see where the value lies.</p><h2>How to choose what to refactor</h2><p>How best to improve a codebase is highly subjective, but I've found a good way to keep myself improving the right things is to regularly ask myself these sorts of questions:</p><ul><li>How does this software affect the bottom line of the business?</li><li>What's the roadmap for this software?</li><li>How will the demands on this software change?</li><li>How will the number of people using this software change?</li><li>Based on its current trajectory, what will this codebase be like in 6, 12, and 24 months time?</li><li>Which parts of this codebase churn, and which don't?</li><li>What's the development team like that work on this project?</li><li>What aspects of this codebase make it difficult to get work shipped?</li><li>What parts of this codebase confuse developers?</li><li>Which parts of this codebase require esoteric knowledge?</li></ul><p>Thinking about these for your own work will help you identify better refactors to make, and more effectively fight the never-ending battle against pernicious technical debt on your software projects. Good luck, and happy refactoring!</p>
    ]]></content:encoded>
  </item>
  <item>
    <title>Twitter makes me feel bad</title>
    <pubDate>Sat, 04 Jan 2020 13:00:00 GMT</pubDate>
    <description>Twitter has some great web development chatter. However, it also makes me feel like a fake and a failure. Here's why, and what I intend to do about it.</description>
    <link>https://mcarter.me/posts/twitter-makes-me-feel-bad</link>
    <guid>https://mcarter.me/posts/twitter-makes-me-feel-bad</guid>
    <content:encoded><![CDATA[
      <h2>Not achieving enough</h2><p>Twitter feeds me a constant highight reel of work and life achievements. New code library releases, new app releases, new product features, new blog posts, new videos, new interviews, and most frequently of all - hot new takes.</p><p>When you've spent the entire week solving problems that aren't world changing, Twitter can leave you feeling like you've achieved nothing at all. The sad part is, this can even happen when you know you've done lots of valuable work.</p><h2>Not talented enough</h2><p>The basic premise of Twitter is that you follow people you're interested in, and share content you think others might find interesting. This can create a healthy platform for learning, socialising, and sharing your work.</p><p>However, if like me, you use Twitter to follow the best and brightest in your industry, your perspective quickly becomes skewed towards feeling distinctly average about yourself. It's very easy for this to happen when your view of your industry is the content shared from the top 1% of talent on the planet.</p><h2>Not social enough</h2><p>Twitter makes me feel like a shy kid at a party. I'm constantly wanting to say things, but I don't in case something bad happens. What if I've misunderstood something? What if people don't find my joke funny? What if nobody cares about the thing I think is cool? Worst of all, what if I accidentally say something un-woke and have my career ruined over a misunderstanding?</p><p>Twitter rewards confidence, extroversion, clear communicators, and quick-wittedness. If you're none of these things, using Twitter can actually be a tiring, even emotionally draining experience. You feel bad about not Tweeting enough, feel bad about Tweeting and getting no engagement, or feel bad when someone takes something you've said the wrong way.</p><hr><h2>What can I do about this?</h2><p>Despite everything I've said above. I actually enjoy using Twitter on the whole. It feels like the right format for a social network to me. I also believe that as a company owner, having some sort of social media presence is important.</p><p>When I really get introspective, I also realise the issues I've highlighted aren't actually problems with Twitter at all. What I'm experiencing are my own insecurities, Twitter is just surfacing them. In response, I've decided to remind myself of the following when using Twitter.</p><h3>Comparison is the thief of joy</h3><p>The only person I should be comparing myself to is my past self. Also, I need to remember that I've chosen to follow high achievers on Twitter because I want to learn and improve. I shouldn't feel bad that they're outperforming me.</p><h3>Work doesn't need to be shared to be valuable</h3><p>Some of the most valuable work I've done in my career is unbelieveably mundane. I should seek a sense of achievement from working on projects I care about, and not feel I have to make a show of things to be worthwhile.</p><h3>Stop worrying so much about what people think</h3><p>People will disagree with me, that's fine. People won't find what I have to share interesting, that's fine too. Nobody is dwelling on my Twitter activity, or lack thereof, I shouldn't either.</p><h3>Nobody can define success for you</h3><p>Success isn't money in the bank, code written, content shared, a follower count, travelling for conferences, or hours worked per week. Success is achieving what I set out to do, nothing more, nothing less.</p>
    ]]></content:encoded>
  </item>
  <item>
    <title>Things I wish I understood before starting an agency</title>
    <pubDate>Sat, 26 Oct 2019 13:00:00 GMT</pubDate>
    <description>In 2015 I started a digital agency. As an employee who made the switch to running a business, here are some things I wish I'd understood before starting.</description>
    <link>https://mcarter.me/posts/before-you-start-an-agency</link>
    <guid>https://mcarter.me/posts/before-you-start-an-agency</guid>
    <content:encoded><![CDATA[
      <p>In 2015 I started <a href='https://www.weareleaf.com' target='_blank' rel='noopener noreferrer'>Leaf</a>, a digital product agency, with my co-founder, Chris. As an employee who made the switch to running their own business, here are some things I wish I'd understood before starting.</p></div></header><main><div class="inner-wrapper"><h2>Keep learning</h2><p>You'll find yourself needing to know a little on a broad range of subjects like finance, marketing, sales, management, business, economics, and law. You can learn these on an ad-hoc basis, but it's a time consuming process.</p><p>Podcasts and audiobooks are very helpful for building this knowledge. They allow dog walks, gym sessions, or long drives to double up as learning opportunities.</p><h2>Sell your head</h2><p>Some clients see you as a pair of hands, there to implement their ideas. Others will see you as a true expert in your field, there to guide their thinking.</p><p>Selling your expertise is where your true value lies, but it's hard to do if you're not seen as an expert from the beginning. Establish an expert position early on in each client relationship, and make sure your value is driven primarily from your ideas.</p><h2>Work is not your product</h2><p>Your agency may spend a lot of time writing code, but you're not paid for code. You may even build beautiful software products, but you're not paid for software either.</p><p>You are paid for delivering a desired outcome for each client you work with. Make sure there's no confusion about what this outcome is, keep it front and centre, and let it guide your decision making.</p><h2>Value is subjective</h2><p>The exact same work may worth £5,000, and £50,000 to two different clients. Take steps to figure out what value you're delivering, and charge an amount that keeps the exchange worthwhile for both parties.</p><p>This isn't greed, it's professionalism. By ensuring everyone involved benefits from a good work, you incentivise everyone to work together efficiently, effectively, and to the best of their ability.</p><h2>People skills matter</h2><p>You probably decided to start a business because you posess a set of valuable technical skills that you thought could be better put to use if you were your own boss.</p><p>While your technical knowledge is key, actually getting the opportunity to use it to deliver successful change to your clients will depend on your ability to understand, emphathise, translate, explain, teach, and lead.</p><p>Don't underestimate ths importance of developing these softer skills. Most technical employees are very shielded from the people side of the organisation they work in. As your own boss, you won't be.</p><h2>Keep marketing</h2><p>When you're busy, marketing can feel a bit like handing out flyers for a sold out gig. However, being constantly a little oversubscribed provides income stability, keeps you aware of new opportunities, increases the amount you can charge for your work, and lets you choose who to work with.</p><p>A good marketing funnel takes time to develop. You don't want to be scrambling to build one once you're already in a quiet period. Make time for marketing from the beginning, and improve as you go.</p><h2>Pick a niche</h2><p>You're probably able to use your skills to solve a broad range of problems for clients reasonably well. Unfortunately, so can loads of people.</p><p>Aim to be one of a few businesses with true expertise in doing what you do. This will make you an obvious choice for anyone looking for help with your niche. You'll also likely be solving the similar problems for each new client you work with, perpetuating a virtuous cycle of learning, experience, efficiency, and expertise.</p><h2>Size matters</h2><p>For an engagement with a lot of implementation work, clients will sometimes choose a larger, technically mediocre agency over your smaller technically brilliant one. This will seem like a lack of confidence in your technical abilities, but it's not.</p><p>From a business point of view, the deep bench and established nature of a larger agency just make them a safer bet when there's a lot of implementation work to be done.</p><p>When you're starting out, you can make yourself more attractive by building a bench of your own, developing specific expertise that makes you the obvious choice in spite of your size, and selling your knowledge rather than your implementation.</p><h2>Build some runway</h2><p>When you land your first big client, it can be tempting to feel like you've made it, and start spending. Resist this urge.</p><p>Before you're established, losing a client or having unexpected costs to deal with can easily topple your business. Having several months of payroll in the bank will give you room to manoeuvre, and peace of mind to make clear-headed decisions about how to move forward.</p><p>When you have employees, cash becomes even more important. Don't rely on luck. Know your burn rate, and give yourself a generous runway.</p><h2>You can fire your clients</h2><p>Sometimes a client relationship will degrade to the point of being unsalvageable. In those cases it can be appropriate to fire your client, and it's sometimes the best way forward for everyone involved.</p><p>A firing needn't be abrupt. You can wind things down over a month or two for a clean and easy break, or seamlessly transition the client over to someone else who's a better fit for their needs.</p><h2>Grow without hiring</h2><p>Hiring is not the only way to grow your business. You can stay physically small, but do more valuable work with larger clients as your expertise develops. Alternatively, you can build a bench freelancers while keeping your core team small, like a tap of expertise you can turn on or off as required.</p><p>At <a href='https://weareleaf.com' target='_blank' rel='noopener'>Leaf</a>, we've found a mix of hiring, and working with known and trusted freelance subject matter experts has helped to smooth out heavy workloads, and improved the quality of our output.</p><h2>Anything can be a mentor</h2><p>Mentorship will be incredibly valuable for helping you learn and make good decisions, but it doesn't need to be a one-on-one activity, or even come from a person.</p><p>A relevant blog post, podcast, audiobook, presentation, or online discussion group can all be forms of mentorship. Don't feel like if you're not constantly able to travel meet people you can't be mentored.</p><h2>You can't outwork busy</h2><p>If you've got too much on your plate, you need to work less, not more, to get on top of it. Trying to outwork busy doesn't work, because if you're doing your job right, each piece of work will result in even more work being offered back to you in return.</p><p>Like a throttle on a car, your pace of work needs to be consciously controlled to avoid a runaway acceleration and you repeatedly butting up against your physical and mental limits.</p><h2>Remain dispassionate</h2><p>Too much passion for your business will make your life an unbearable emotional rollercoaster. Your business isn't a success if it's making you miserable, and a lot of what happens will be outside of your circle of direct control.</p><p>From a certain perspective, your business is just a game. Treat it as such. Do your best, but don't expect to win every time, and don't get too emotionally invested.</p>
    ]]></content:encoded>
  </item>
  <item>
    <link>https://weareleaf.com/blog/putting-amazon-textract-to-the-test</link>
    <guid>https://weareleaf.com/blog/putting-amazon-textract-to-the-test</guid>
    <title>Putting Amazon Textract to the test</title>
    <pubDate>Tue, 17 Sep 2019 13:00:00 GMT</pubDate>
    <description>Amazon Textract extracts text and structured data from scanned or photographed documents, but how reliably can it be used for business process automation? We put it to the test.</description>
  </item>
  <item>
    <link>https://weareleaf.com/blog/how-to-thrive-in-an-automated-business-world</link>
    <guid>https://weareleaf.com/blog/how-to-thrive-in-an-automated-business-world</guid>
    <title>How to thrive in an automated business world</title>
    <pubDate>Tue, 20 Aug 2019 13:00:00 GMT</pubDate>
    <description>How can your business thrive when you're constantly being disrupted by leaner, faster, more automated competition on a global scale?</description>
  </item>
  <item>
    <link>https://weareleaf.com/blog/automate-where-it-matters-with-process-maps</link>
    <guid>https://weareleaf.com/blog/automate-where-it-matters-with-process-maps</guid>
    <title>Automate where it matters with process maps</title>
    <pubDate>Tue, 16 Jul 2019 13:00:00 GMT</pubDate>
    <description>We've experienced how competing stakeholders, unclear ROIs, and uncertainty can make committing to business automation difficult. Process maps provide a powerful way to clear the fog.</description>
  </item>
  <item>
    <link>https://weareleaf.com/blog/goals-matter</link>
    <guid>https://weareleaf.com/blog/goals-matter</guid>
    <title>Goals matter</title>
    <pubDate>Tue, 18 Jun 2019 13:00:00 GMT</pubDate>
    <description>Without a clear definition of success, it's hard to know which direction to take, or whether you're making any progress. Goals provide direction and clarity for your teams.</description>
  </item>
  <item>
    <link>https://weareleaf.com/blog/the-power-of-small-development-phases</link>
    <guid>https://weareleaf.com/blog/the-power-of-small-development-phases</guid>
    <title>The power of small development phases</title>
    <pubDate>Mon, 17 Dec 2018 13:00:00 GMT</pubDate>
    <description>Imagine this scenario - someone in your company proposes a new software feature with the potential to save the business ...</description>
  </item>
  <item>
    <link>https://weareleaf.com/blog/a-home-office-for-productivity</link>
    <guid>https://weareleaf.com/blog/a-home-office-for-productivity</guid>
    <title>A home office for productivity</title>
    <pubDate>Thu, 02 Aug 2018 13:00:00 GMT</pubDate>
    <description>At Leaf, we embrace remote work to get a productive edge. However, it's easy for a remote environment to work against you.</description>
  </item>
  <item>
    <link>https://weareleaf.com/blog/behavioural-traps-in-software-teams</link>
    <guid>https://weareleaf.com/blog/behavioural-traps-in-software-teams</guid>
    <title>Behavioural traps in software teams</title>
    <pubDate>Mon, 21 May 2018 13:00:00 GMT</pubDate>
    <description>In my experience of software teams, there are a few behavioural traps that leaders (senior stakeholders ...</description>
  </item>
  <item>
    <link>https://weareleaf.com/blog/working-too-much-please-stop</link>
    <guid>https://weareleaf.com/blog/working-too-much-please-stop</guid>
    <title>Working too much? Please stop</title>
    <pubDate>Mon, 20 Nov 2017 13:00:00 GMT</pubDate>
    <description>These days, people in most organisations are encouraged to work in their personal time ...</description>
  </item>
  <item>
    <link>https://weareleaf.com/blog/5-tips-for-actually-shipping-a-side-project</link>
    <guid>https://weareleaf.com/blog/5-tips-for-actually-shipping-a-side-project</guid>
    <title>5 tips for actually shipping a side project</title>
    <pubDate>Wed, 29 Mar 2017 13:00:00 GMT</pubDate>
    <description>We took Howdy, our own little app, from an idea to a fully published SaaS application entirely in our spare time. During its development...</description>
  </item>
  <item>
    <link>https://weareleaf.com/blog/there-are-no-excuses-for-poor-engineering-in-2017</link>
    <guid>https://weareleaf.com/blog/there-are-no-excuses-for-poor-engineering-in-2017</guid>
    <title>There are no excuses for poor engineering in 2017</title>
    <pubDate>Thu, 02 Mar 2017 13:00:00 GMT</pubDate>
    <description>Writing great code is easier than ever, and yet we act like it doesn't matter.</description>
  </item>
  <item>
    <link>http://tech.holidayextras.co.uk/2015/03/18/5-tips-for-a-smoother-code-review-process/</link>
    <guid>http://tech.holidayextras.co.uk/2015/03/18/5-tips-for-a-smoother-code-review-process/</guid>
    <title>5 tips for a smoother code review process</title>
    <pubDate>Wed, 18 Mar 2015 13:00:00 GMT</pubDate>
    <description>Some tips for a better code review process based on my experiences working at Holiday Extras.</description>
  </item>
  <item>
    <link>http://tech.holidayextras.co.uk/misc/2014/03/09/taming-technical-debt/</link>
    <guid>http://tech.holidayextras.co.uk/misc/2014/03/09/taming-technical-debt/</guid>
    <title>Taming your Technical Debt</title>
    <pubDate>Sun, 9 Mar 2014 13:00:00 GMT</pubDate>
    <description>What I learned about getting technical debt within a large team under control while working at Holiday Extras.</description>
  </item>
  <item>
    <link>http://tech.holidayextras.co.uk/mobile/2014/01/20/getting-performance-cordova-based-application/</link>
    <guid>http://tech.holidayextras.co.uk/mobile/2014/01/20/getting-performance-cordova-based-application/</guid>
    <title>5 tips for great performance from your Cordova app</title>
    <pubDate>Mon, 20 Jan 2014 13:00:00 GMT</pubDate>
    <description>Back from the days before React Native, some tips for getting the best performance possible from a Cordova based mobile app.</description>
  </item>
</channel>
</rss>
